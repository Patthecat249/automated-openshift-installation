- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook - Install a Load-Balancer-VM"
  become: "true"
  become_user: "root"
  hosts: 127.0.0.1
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  vars:
    - cpu: "{{ lb.cpu }}"
    - ram: "{{ lb.ram }}"
    - hostname: "{{ lb.hostname }}"
    - ip: "{{ lb.ip }}"
    - kickstart_file: "{{ lb.hostname }}.cfg"
 
  tasks:
# Erstelle Arbeitsverzeichnisse
    - name: "01 --- Create Working-Directories"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_root }}"
        - "{{ dir_terraform }}"
        - "{{ dir_terraform }}{{ lb.hostname }}"
      tags:
        - create

# Erstelle VM-Instanz Terraform "main.tf"-file
# In dieser Datei wird auf auf das Terraform-Modul verwiesen
    - name: "02 --- Create main.tf-file from lb-tf.j2"
      template:
        src: "../99-jinja-templates/terraform/lb-tf.j2"
        dest: "{{ dir_terraform }}{{ lb.hostname }}/main.tf"

# Erzeuge und kopiere das output.tf-file in den VM-Instanz-Ordner
    - name: "03 --- Create lb-output.tf-file"
      template:
        src: "../99-jinja-templates/terraform/lb-output.j2"
        dest: "{{ dir_terraform }}{{ lb.hostname }}/output.tf"
      tags:
        - create

# Erstelle und kopiere das vars.tf-file in den Terraform-Module Ordner
    - name: "04 --- Create vars.tf-file from jinja-template vars.tf"
      template:
        src: "../99-jinja-templates/terraform/vars-tf.j2"
        dest: "{{ dir_terraform }}{{ lb.hostname }}/vars.tf"
      tags:
        - create

# Erzeuge die virtuelle Maschine
    - name: "05 --- Create virtual machine ({{ lb.hostname }}) with terraform"
      raw: "cd {{ dir_terraform }}{{ lb.hostname }} && /usr/local/bin/terraform init && /usr/local/bin/terraform apply -auto-approve"

# Ermittle die MAC-Adresse, der erzeugten VM
    - name: "06 --- Retrieve mac-address from created virtual machine"
      raw: "cd {{ dir_terraform }}{{ lb.hostname }} && terraform output -json | jq '.[\"mac-address\"].value' | sed -e 's|\"||g'"
      register: mac

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DHCP-Eintrag in DNSMASQ
#    - name: "07 --- Add DHCP-entry to dnsmasq.conf"
#      become: "true"
#      become_user: "root"
#      lineinfile:
#        path: /etc/dnsmasq.conf
#        insertafter: "^# OpenShift-Nodes"         
#        line: "dhcp-host={{ mac.stdout | trim }},{{ lb.hostname }},{{ lb.ip }},set:ocp43"
#      delegate_to: ansible
#      notify: "restart dnsmasq"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DNS-Lookup-Eintrag in DNSMASQ
#    - name: "08 --- Add DNS-Lookup-entry to dnsmasq.conf"
#      become: "true"
#      become_user: "root"
#      lineinfile:
#        path: "/etc/dnsmasq.conf"
#        insertafter: "^# Static-DNS-Assignements" 
#        line: "address=/{{ lb.hostname }}.{{domain}}/{{ lb.ip }}"
#      delegate_to: ansible
#      notify: "restart dnsmasq"

# Starte den DNS-Dienst erneut, wenn sich etwas an der DNS-Konfiguration ge√§ndert hat.
#  handlers:
#    - name: "restart dnsmasq"
#      become: "true"
#      become_user: "root"
#      service:
#        name: dnsmasq
#        state: restarted
#      delegate_to: ansible

