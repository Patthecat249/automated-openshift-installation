---
- name: "Installation and Configuration of a central-installation-vm"
  hosts: 127.0.0.1
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  tasks:
    - name: "01 - Install necassary software programs"
      yum:
        name:
          - epel-release
          - centos-release-ansible-29.noarch
          - ansible
          - git
          - sshpass
          - wget.x86_64
          - jq.x86_64
          - podman.x86_64
          - skopeo.x86_64
          - nfs-utils.x86_64
          - unzip
        state: "present"

# Erstelle Arbeitsverzeichnisse
    - name: "02 --- Create Working-Directories"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_root }}"
        - "{{ dir_terraform }}"
        - "{{ dir_tools }}"
        
    
    - name: "03 - Download terraform"
      get_url:
        url: "{{ download_tf }}"
        dest: "{{ dir_terraform }}"

    - name: "04 - Download terraform vSphere-Provider-Plugin"
      get_url:
        url: "{{ download_tf_vsphere_plugin }}"
        dest: "{{ dir_terraform_vsphere_plugin }}"


    - name: "05 - Entpacken von terraform"
      unarchive:
        src: "{{ dir_terraform }}terraform_{{ tf_version }}_linux_amd64.zip"
        dest: "{{ dir_tools }}"
        remote_src: "true"

    - name: "06 - Terraform nach /usr/bin kopieren und ausf√ºhrbar machen"
      copy:
        src: "{{ dir_tools }}terraform"
        dest: "/usr/local/bin/terraform"
        mode: "0755"
        remote_src: "true"

    - name: "07 - /etc/exports bearbeiten"
      lineinfile:
        path: /etc/exports
        line: "{{ dir_nfs_data }} *(rw,sync,no_subtree_check,no_root_squash)" 
        
    - name: "08 - NFS-Server - Service starten"
      service:
        name: "nfs-server.service"
        state: "started"
        enabled: "true"

    - name: "09 - Lege Links in NFS-Share-Verzeichnis ab"
      file:
        src: "/root/git/automated-openshift-installation/ansible/98-download/{{ item.src }}"
        dest: "/nfs-data/{{ item.dest }}"
        state: "link"
      with_items:
        - { src: '{{ coreos_initram }}', dest: '{{ coreos_initram }}'}
        - { src: '{{ coreos_kernel }}', dest: '{{ coreos_kernel }}'}
        - { src: '{{ coreos_iso }}', dest: '{{ coreos_iso }}'}
        - { src: '{{ coreos_raw }}', dest: '{{ coreos_raw }}'}
...
