- name: "Install a Registry-VM"
  become: "true"
  become_user: "root"
  hosts: 127.0.0.1
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  vars:
    - cpu: "{{ lb.cpu }}"
    - ram: "{{ lb.ram }}"
    - hostname: "{{ lb.hostname }}"
    - ip: "{{ lb.ip }}"
    - kickstart_file: "{{ lb.hostname }}.cfg"
 
  tasks:
# Erstelle Arbeitsverzeichnisse
    - name: "01 --- Create Working-Directories"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_root }}"
        - "{{ dir_terraform }}"
        - "{{ dir_terraform }}{{ lb.hostname }}"
        - "{{ dir_terraform_module_vm }}"
      tags:
        - create

    - name: "02 --- Create Working-Directories with sudo"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_nfs_root }}"
      tags:
        - create

# Install some Software
    - name: "03 --- Installiere nfs-utils.x86_64"
      yum:
        name: nfs-utils.x86_64
        state: present
    - name: "04 --- Installiere libnfs-utils.x86_64"
      yum:
        name: libnfs-utils.x86_64
        state: present

# Mounte das NFS-Verzeichnis /volume1/nfs-iso nach /mnt/sva
    - name: "04 --- Mounting NFS-Share {{ nfs_server }}:{{ nfs_mount_path }}"
      mount:
        fstype: nfs
        opts: defaults
        state: mounted
        src: "{{ nfs_server }}:{{ nfs_mount_path }}"
        path: "{{ dir_nfs_root }}"
        backup: yes

# Wait a second
    - name: "05 --- Wait a Second..."
      wait_for:
        timeout: 1

# Erstelle aus einem Template eine Kickstart-Datei und speichere sie auf dem NFS-Share
    - name: "06 --- Create kickstart.cfg from kickstart.j2"
      template:
        src: "../../terraform/templates/kickstart.j2"
        dest: "{{ dir_nfs_root }}{{ dir_mounted_kickstart_configs }}{{ lb.hostname }}.cfg" # Hier muss noch der Pfad verifiziert werden
     
# Erstelle die Terraform-Files "main.tf/output.tf"-files
# main.tf
    - name: "07 --- Create main.tf-file"
      template:
        src: "../99-jinja-templates/terraform/new-vm-from-clone-with-network-settings-tf.j2"
        dest: "{{ dir_terraform }}{{ lb.hostname }}/main.tf"
    
# Erzeuge und kopiere das output.tf-file in den VM-Instanz-Ordner
    - name: "08 --- Create output.tf-file"
      template:
        src: "../../terraform/templates/output.j2"
        dest: "{{ dir_terraform }}{{ lb.hostname }}/output.tf"
    
# Erzeuge die virtuelle Maschine
    - name: "09 --- Create virtual machine with terraform"
      raw: "cd {{ dir_terraform }}{{ lb.hostname }} && /usr/local/bin/terraform init && /usr/local/bin/terraform apply -auto-approve"

# Ermittle die MAC-Adresse, der erzeugten VM
    - name: "10 --- Retrieve mac-address from created virtual machine"
      raw: "cd {{ dir_terraform }}{{ lb.hostname }} && terraform output -json | jq '.[\"mac-address\"].value' | sed -e 's|\"||g'"
      register: mac

# Erstelle für diese VM, anhand der MAC-Adresse ein PXELINUX-Config-File im TFTPROOT-Dir vom PXE-SERVER
    # - name: "19 --- Create pxelinux-config-file with mac-address-filename on tftproot on pxe-server"
    #   become: "true"
    #   become_user: "root"
    #   template:
    #     src: "../../terraform/templates/pxelinux-template.j2"
    #     dest: "{{dir_tftproot}}01-{{ mac.stdout | trim | regex_replace(':', '-')}}"
    #     mode: "0755"
    #     owner: "dnsmasq"
    #     group: "wheel"
    #   delegate_to: pxe-server

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DHCP-Eintrag in DNSMASQ
    # - name: "20 --- Add DHCP-entry to dnsmasq.conf"
    #   become: "true"
    #   become_user: "root"
    #   lineinfile:
    #     path: /etc/dnsmasq.conf
    #     insertafter: "^## OpenShift-Nodes-DHCP"         
    #     line: "dhcp-host={{ mac.stdout | trim }},{{ lb.hostname }},{{ lb.ip }},set:ocp43"
    #   delegate_to: pi
    #   notify: "restart dnsmasq"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DNS-Lookup-Eintrag in DNSMASQ
    # - name: "21a --- Add DNS-Lookup-entry to dnsmasq.conf"
    #   become: "true"
    #   become_user: "root"
    #   lineinfile:
    #     path: "/etc/dnsmasq.conf"
    #     insertafter: "^## OpenShift-Nodes-DNS" 
    #     line: "address=/{{ lb.hostname }}.{{ clustername }}.{{domain}}/{{ lb.ip }}"
    #   delegate_to: pi
    #   notify: "restart dnsmasq"

# Add DNS-Entries fr API, API-INT, Console
    # - name: "21b --- Add DNS-Lookup-entry to dnsmasq.conf"
    #   become: "true"
    #   become_user: "root"
    #   lineinfile:
    #     path: "/etc/dnsmasq.conf"
    #     insertafter: "^## OCP-Routes" 
    #     line: "{{ item }}"
    #   with_items:
    #     - "address=/.apps.{{clustername}}.{{domain}}/{{ lb.ip }}"
    #     - "address=/api.{{clustername}}.{{domain}}/{{ lb.ip }}"
    #     - "address=/api-int.{{clustername}}.{{domain}}/{{ lb.ip }}"
    #     - "address=/console-openshift-console.apps.{{clustername}}.{{domain}}/{{ lb.ip }}"
    #   delegate_to: pi
    #   notify: "restart dnsmasq"


# Unmounting NFS-Share
    - name: "22 --- Unmounting NFS-Share"
      mount:
        fstype: nfs
        opts: defaults
        state: absent
        src: "{{ nfs_server }}{{ nfs_mount_path }}"
        path: "{{ dir_nfs_root }}"
        backup: yes

# Starte den DNS-Dienst erneut, wenn sich etwas an der DNS-Konfiguration geändert hat.
  # handlers:
  #   - name: "restart dnsmasq"
  #     become: "true"
  #     become_user: "root"
  #     service:
  #       name: dnsmasq
  #       state: restarted
  #     delegate_to: pi

