# This playbook must be run on install-vm node 
---
# Dieses Playbook installiert und konfiguriert Spectrum Scale-CNSA in OpenShift
# Das ist eine Online-Installation
# Schritte
# Github-YAML-Files herunterladen
# - https://raw.githubusercontent.com/IBM/ibm-spectrum-scale-container-native/v5.1.2.1/config/scale/cluster/cluster/scale_v1beta1_cluster.yaml
# -   oc apply -f https://raw.githubusercontent.com/IBM/ibm-spectrum-scale-container-native/v5.1.2.1/generated/mco/ocp4.8/mco_x86_64.yaml

## - Steps
## - Create Folders
## - Download yaml from Github
## - Create templates from github-yaml-files
## - Create Namespaces
## - Create configmap with scale-storage-cluster-certificate
## - Prevent Nodes from auto-rebooting
## - Create MachineConfig and ContainerRunTimeConfig
## - Label Nodes
## - Reboot nodes

# Create Working-Directories
- name: "01 - Create Working-Directories"
  file:
    path: "{{ item }}"
    state: "directory"
    recurse: "true"
  with_items:
    - "{{ dir_cnsa }}"
  tags: 
    - testcnsa


# Prevent Nodes from auto-rebooting
- name: "Prevent nodes from autorebooting while patching - MASTER" 
  # shell: "oc patch --type=merge --patch='{\"spec\":{\"paused\":true}}' machineconfigpool/master --kubeconfig={{ kubeconfig_path }}"
  k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
    definition:
      apiVersion: machineconfiguration.openshift.io/v1
      kind: MachineConfigPool
      metadata:
        name: master
      spec:
        paused: true

- name: "Prevent nodes from autorebooting while patching - WORKER" 
  # shell: "oc patch --type=merge --patch='{\"spec\":{\"paused\":true}}' machineconfigpool/worker --kubeconfig={{ kubeconfig_path }}"
  k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
    definition:
      apiVersion: machineconfiguration.openshift.io/v1
      kind: MachineConfigPool
      metadata:
        name: worker
      spec:
        paused: true

# Create a Namespace for SpectrumScale CNSA installation in OpenShift
# Create a Namespace for SpectrumScale CNSA installation in OpenShift
- name: "### --- 05 - Create the Namespace {{namespace_cnsa}}"
  # ignore_errors: "yes"
  # shell: "oc create namespace {{namespace_cnsa}} --kubeconfig={{ kubeconfig_path }}"
  k8s:
    name: "{{ namespace_cnsa }}"
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
  tags:
    - reinstall
    - v5113

# Create a Namespace for SpectrumScale Driver installation in OpenShift
- name: "### --- 06 - Create the Namespace {{namespace_csi_driver}}"
  # ignore_errors: "yes"
  # shell: "oc create namespace {{namespace_csi_driver}} --kubeconfig={{ kubeconfig_path }}"
  k8s:
    name: "{{ namespace_csi_driver }}"
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
  tags:
    - reinstall    
    - v5113

# Create a Namespace for SpectrumScale Operator installation in OpenShift
- name: "### --- 07 - Create the Namespace {{namespace_cnsa_operator}}"
  # ignore_errors: "yes"
  # shell: "oc create namespace {{namespace_cnsa_operator}} --kubeconfig={{ kubeconfig_path }}"
  k8s:
    name: "{{ namespace_cnsa_operator }}"
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
  tags:
    - reinstall   
    - v5113

# Trust the self signed certificate of remote gpfs cluster GUI
- name: "### --- 08 - Create CA Certificats for storage cluster"
  # command: |
  #   oc create configmap cacert-storage-cluster-1 --from-literal=storage-cluster-1.crt="$(openssl s_client -showcerts -connect {{ sps.sps1.fqdn }}:443 </dev/null 2>/dev/null|openssl x509 -outform PEM)" -n {{namespace_cnsa}} --kubeconfig={{ kubeconfig_path }}
  # ignore_errors: yes
  k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cacert-storage-cluster-1
        namespace: "{{ namespace_cnsa }}"
      data:
        storage-cluster-1.crt: "{{ lookup('pipe', 'openssl s_client -showcerts -connect ' + sps.sps1.fqdn + ':443 </dev/null 2>/dev/null|openssl x509 -outform PEM') }}"
  tags:
    - v5113

# This secret must be a Containeroperator-User on the Storage-Cluster
- name: "### --- 10 - Create Secret for GUI-User cnsa in SPS-OpenShift"
  # ignore_errors: "yes"
  # raw: "oc create secret generic {{secret_name_storage_cluster_cnsa}} --from-literal=username='{{user_cnsa}}' --from-literal=password='{{pass_cnsa}}' -n {{namespace_cnsa}} --kubeconfig={{ kubeconfig_path }}"
  k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ secret_name_storage_cluster_cnsa }}"
        namespace: "{{ namespace_cnsa }}"
      stringData:
        username: "{{ user_cnsa }}"
        password: "{{ pass_cnsa }}"
  tags:
    - reinstall
    - v5113

- name: "### --- 11 - Create Secret for GUI-User csiadm of SpectrumScale-Storage-Cluster"
  # ignore_errors: "yes"
  # raw: "oc create secret generic {{secret_name_storage_cluster_csi}} --from-literal=username='{{user_csiadmin}}' --from-literal=password='{{pass_csiadmin}}' -n {{namespace_csi_driver}} --kubeconfig={{ kubeconfig_path }}"
  k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ secret_name_storage_cluster_csi }}"
        namespace: "{{ namespace_csi_driver }}"
        labels:
          product: ibm-spectrum-scale-csi
      stringData:
        username: "{{ user_csiadmin }}"
        password: "{{ pass_csiadmin }}"
  tags:
    - v5113
    
    
# Increase PIDS_LIMIT (von 1024 > 4096) UND
# Installieren der Kernel-AbhÃ¤ngigkeit "kernel-devel" im OpenShift per Operator
# Machine-Config-Template erstellen mit beiden
# Alternativ: 
# oc create -f spectrumscale/machineconfig/increase_pid_mco.yaml
# oc create -f spectrumscale/machineconfig/machineconfigoperator.yaml
- name: "06 - Create Template machineconfig and ContainerRuntimeConfig in one file"
  template:
    src: "../../99-jinja-templates/spectrumscale/worker-machine-config.j2"
    dest: "{{dir_spectrumscale}}sps-worker-machine-config.yaml"

- name: "07 - Create machine-config"
  raw: "oc apply -f {{dir_spectrumscale}}sps-worker-machine-config.yaml --kubeconfig={{kubeconfig}}"
# Login into Registry
# podman login -u {{registry_user}} -p {{registry_pass}} {{local_registry}}:{{registry_port}}


# # Label the Worker-Nodes
- name: "### --- 09 - Label Worker-Nodes with Label app.kubernetes.io/component=scale"
  # raw: "oc label node {{item.hostname}} app.kubernetes.io/component=scale --overwrite --kubeconfig={{ kubeconfig_path }}"
  k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
    definition:
      apiVersion: v1
      kind: Node
      metadata:
        name: "{{ item.hostname }}"
        labels: 
          app.kubernetes.io/component: scale
  with_items:
    - "{{workers}}"
  tags:
    - v5113

# Edit the ibm-spectrum-scale-operator-v{{ version_cnsa }}.yaml and modify the imagenames
- name: "### --- 13 - Create Template for the SPS-Operator"
  template:
    src: "../templates/ibm-spectrum-scale-operator-v{{ version_cnsa }}.yaml"
    dest: "{{dir_spectrumscale}}ibm-spectrum-scale-operator-v{{ version_cnsa }}.yaml"
    owner: "ocpadm"
    group: "ocpadmin"
    force: "yes"
    backup: "yes"
  tags:
    - reinstall
    - v5113


# Edit the Custom Resource ibm_v1_scalecluster_cr-v{{ version_cnsa }}.yaml file 
- name: "### --- 14 - Create Template for the Spectrum-Custom-Resource in OpenShift"
  template:
    src: "../templates/ibm_v1_scalecluster_cr-v{{ version_cnsa }}.yaml"
    dest: "{{dir_spectrumscale}}ibm_v1_scalecluster_cr-v{{ version_cnsa }}.yaml"
    owner: "ocpadm"
    group: "ocpadmin"
    force: "yes"
    backup: "yes"
  tags:
    - reinstall
    - v5113


# Deploy the CNSA-Cluster into OpenShift
- name: "### --- 15 - Deploy the IBM-Spectrum-Scale-Operator and CNSA-Cluster"
  # ignore_errors: "yes"
  # raw: "{{item}}"
  # with_items:
  #   - "oc apply -f {{dir_spectrumscale}}ibm-spectrum-scale-operator-v{{ version_cnsa }}.yaml  --kubeconfig={{ kubeconfig_path }}"
  #   - "oc apply -f {{dir_spectrumscale}}ibm_v1_scalecluster_cr-v{{ version_cnsa }}.yaml --kubeconfig={{ kubeconfig_path }}"
  k8s:
    state: present
    src: "{{ item }}"
    kubeconfig: "{{ kubeconfig_path }}"
    context: admin
  loop:
    - "{{ dir_spectrumscale }}ibm-spectrum-scale-operator-v{{ version_cnsa }}.yaml"
    - "{{ dir_spectrumscale }}ibm_v1_scalecluster_cr-v{{ version_cnsa }}.yaml"
  tags:
    - deploysps
    - reinstall
    - v5113

# Wait for all four Pods of CNSA Gui are running
- name: "### --- 16 - Wait for all 4/4 Pods of GUI are running"
  shell: "/usr/local/bin/oc --kubeconfig=\"{{ kubeconfig_path }}\" get pods -n {{namespace_cnsa}} | grep gui | grep 4/4"
  changed_when: false
  register: cmd_res
  retries: 90
  delay: 30
  until: cmd_res.stdout_lines | list | count >= 1

# Wait until GUI is initialized
- name: "### --- 17 - Wait for CNSA-GUI is initialized and available"
  raw: "oc --kubeconfig={{ kubeconfig_path }} -n {{namespace_cnsa}} exec {{ workers[0].hostname }} -- curl -s -k https://ibm-spectrum-scale-gui-ibm-spectrum-scale.apps.{{clustername}}.{{domainname}} --write-out '%{http_code}' -o /dev/null"
  register: output_res
  retries: 90
  delay: 30
  until: "'200' in output_res.stdout"
  tags:
    - v5113

# Delete secret
- name: "16 - Delete default secret ibm-spectrum-scale-gui-containeroperator"
  raw: "oc delete secret ibm-spectrum-scale-gui-containeroperator -n {{namespace_cnsa}} --kubeconfig={{kubeconfig}}"
  tags:
    - reinstall
    - secret

# Create secret
- name: "17 - Create default secret ibm-spectrum-scale-gui-containeroperator"
  raw: "oc create secret generic ibm-spectrum-scale-gui-containeroperator --from-literal=username='{{user_containeroperator}}' --from-literal=password='{{pass_containeroperator}}' --from-literal=group='{{grp_containeroperator}}' -n {{namespace_cnsa}} --kubeconfig={{kubeconfig}}"
  tags:
    - reinstall
    - secret

# Wait script einbauen
- name: "Wait for all 9/9 Pods of GUI are running"
  shell: "/usr/local/bin/oc --kubeconfig=\"{{kubeconfig}}\" get pods -n {{namespace_cnsa}} | grep gui | grep 9/9"
  register: cmd_res
  retries: 90
  delay: 30
  until: cmd_res.stdout_lines | list | count >= 1

# Change Password from ContainerOperator in GUI-Pod
- name: "18 - Change Password from ContainerOperator in GUI-Pod"
  raw: "oc exec --kubeconfig={{kubeconfig}} $(oc --kubeconfig={{kubeconfig}} get pods -lapp=scale-gui -ojsonpath=\"{.items[0].metadata.name}\" -n {{namespace_cnsa}}) liberty -n {{namespace_cnsa}} -- /usr/lpp/mmfs/gui/cli/chuser {{user_containeroperator}} -p '{{pass_containeroperator}}'"
  tags:
    - reinstall
    - secret

# Restart GUI-Pod
- name: "19 - Restart GUI-Pod"
  raw: "oc delete pod --kubeconfig={{kubeconfig}} $(oc --kubeconfig={{kubeconfig}} get pods -lapp=scale-gui -ojsonpath=\"{.items[0].metadata.name}\" -n {{namespace_cnsa}}) -n {{namespace_cnsa}}"
  tags:
    - reinstall
    - secret

# Enable Nodes to auto-rebooting
- name: "20 - Enable Master-OCP-Nodes to autoreboot"
  shell: "oc patch --type=merge --patch='{\"spec\":{\"paused\":false}}' machineconfigpool/master --kubeconfig={{kubeconfig}}"

- name: "21 - Enable Worker-OCP-Nodes to autoreboot"
  shell: "oc patch --type=merge --patch='{\"spec\":{\"paused\":false}}' machineconfigpool/worker --kubeconfig={{kubeconfig}}"

# Wait for Nodes to reboot
