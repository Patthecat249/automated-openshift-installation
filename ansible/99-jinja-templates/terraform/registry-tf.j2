provider "vsphere" {
  vsphere_server = var.vsphere_server
  user = var.vsphere_user
  password = var.vsphere_pass
  allow_unverified_ssl = true
}

# --- VARIABLE-DECLARATION

data "vsphere_datacenter" "dc" {
  name = "{{vsphere_datacenter}}"
}

data "vsphere_compute_cluster" "cluster" {
  name = "{{vsphere_cluster}}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

data "vsphere_resource_pool" "pool" {
  name = "{{vsphere_rp}}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

data "vsphere_datastore" "datastore_{{ registry.hostname }}" {
  name = "{{vsphere_datastore}}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

data "vsphere_network" "network" {
  name = "{{vsphere_network}}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

data "vsphere_virtual_machine" "template" {
  name          = "{{vsphere_vmtemplate_name}}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

# --- Create VM {{ registry.hostname }} --- #
resource "vsphere_virtual_machine" "{{ registry.hostname }}" {
  name                        = "{{ registry.hostname }}"
  folder                      = "{{ vsphere_folder }}"
  guest_id                    = "{{ vsphere_guest_id }}"
  resource_pool_id            = data.vsphere_resource_pool.pool.id
  firmware                    = "bios"
  datastore_id                = data.vsphere_datastore.datastore_{{ registry.hostname }}.id
  num_cpus                    = {{ registry.cpu }}
  memory                      = {{ registry.ram }}
  boot_delay                  = var.vm_boot_delay
  wait_for_guest_ip_timeout   = 0
  wait_for_guest_net_timeout  = 0
  network_interface {
    network_id = data.vsphere_network.network.id
    adapter_type = "vmxnet3"
  }

  clone {
    template_uuid = "${data.vsphere_virtual_machine.template.id}"
    customize {
      linux_options {
        host_name = "{{ registry.hostname }}"
        domain = "{{ domain }}"
      }
      network_interface {
        ipv4_address = "{{registry.ip}}"
        ipv4_netmask = 24
      }
      dns_server_list = ["{{bastion.ip}}"]
      ipv4_gateway = "{{router.openshift.ip}}"
    }
  }

  disk {
    label                     = "disk0"
    size                      = {{ registry.disk }}
    thin_provisioned          = "true"
  }
  # Neue Disk hinzufügen:
  disk {
    label            = "new-disk"
    size             = {{ registry.disk_for_registry }}               # Größe in GB
    unit_number      = 1                # Einheitenslot für die zweite Disk (0 ist die erste Disk)
    eagerly_scrub    = false
    thin_provisioned = true
    datastore_id     = data.vsphere_datastore.datastore_{{ registry.hostname }}.id
  }
}
