# Execute on install-vm

- name: "OCP-MASTER01-VM"
  become: "true"
  become_user: "root"
  hosts: 127.0.0.1
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  vars:
    - cpu: "{{ masters[0].cpu }}"
    - ram: "{{ masters[0].ram }}"
    - hostname: "{{ masters[0].hostname }}"
    - ip: "{{ masters[0].ip }}"
 
  tasks:
# Erstelle Arbeitsverzeichnisse
    - name: "01 --- Create Working-Directories"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_root }}"
        - "{{ dir_terraform }}{{ masters[0].hostname }}"
        - "{{ dir_terraform_module_vm }}"

# Erstelle VM-Instanz Terraform "main.tf"-file
# main.tf
    - name: "02 --- Create main.tf"
      template:
        src: "../99-jinja-templates/terraform/ocp-master-tf.j2"
        dest: "{{ dir_terraform }}{{ masters[0].hostname }}/main.tf"

# output.tf
    - name: "03 --- Create output.tf"
      template:
        src: "../99-jinja-templates/terraform/output.j2"
        dest: "{{ dir_terraform }}{{ masters[0].hostname }}/output.tf"

# vars.tf
    - name: "04 --- Create vars.tf"
      template:
        src: "../99-jinja-templates/terraform/vars-coreos-tf.j2"
        dest: "{{ dir_terraform }}{{ masters[0].hostname }}/vars.tf"

# Erzeuge die virtuelle Maschine
    - name: "05 --- Create virtual-machine {{ masters[0].hostname }} with terraform"
      raw: "cd {{ dir_terraform }}{{ masters[0].hostname }} && /usr/local/bin/terraform init && /usr/local/bin/terraform apply -auto-approve"

# Ermittle die MAC-Adresse, der erzeugten VM
    - name: "06 --- Retrieve mac-address from created virtual machine"
      raw: "cd {{ dir_terraform }}{{ masters[0].hostname }} && /usr/local/bin/terraform output -json | jq '.[\"mac-address\"].value' | sed -e 's|\"||g'"
      register: mac

# Erstelle für diese VM, anhand der MAC-Adresse ein PXELINUX-Config-File im TFTPROOT-Dir vom PXE-SERVER
    - name: "07 --- Create pxelinux-config-file with mac-address-filename on tftproot on pxe-server"
      become: "true"
      become_user: "root"
      vars:
        ignition_file: "{{ignition_filename_master}}"
      template:
        src: "../99-jinja-templates/pxe/pxelinux.cfg.j2"
        dest: "{{dir_tftproot}}01-{{ mac.stdout | trim | regex_replace(':', '-')}}"
        mode: "0755"
        owner: "dnsmasq"
        group: "wheel"
      delegate_to: "{{ bastion.ip }}"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DHCP-Eintrag in DNSMASQ
    - name: "08 --- Add DHCP-entry to /etc/dhcp/dhcpd.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: "/etc/dhcp/dhcpd.conf"
        #insertafter: "^## OpenShift-Nodes-DHCP"         
        #line: "dhcp-host={{ mac.stdout | trim }},{{ masters[0].hostname }},{{ masters[0].ip }},set:openshift_node"
        line: "host {{hostname}} { server-name \"{{bastion.ip}}\"; next-server {{bastion.ip}}; filename \"{{boot_script}}\"; hardware ethernet {{mac.stdout | trim}}; fixed-address {{ip}}; option host-name \"{{hostname}}\"; }"
      delegate_to: "{{ bastion.ip }}"
      notify: "restart dhcpd"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DNS-Lookup-Eintrag in DNSMASQ
    - name: "09 --- Add DNS-Lookup-entry to dnsmasq.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: "/etc/dnsmasq.conf"
        insertafter: "^## OpenShift-Nodes-DNS" 
        line: "address=/{{ masters[0].hostname }}.{{clustername}}.{{domain}}/{{ masters[0].ip }}"
      delegate_to: "{{ bastion.ip }}"
      notify: "restart dnsmasq"

# Starte den DNS-Dienst erneut, wenn sich etwas an der DNS-Konfiguration geändert hat.
  handlers:
    - name: "restart dhcpd"
      become: "true"
      become_user: "root"
      service:
        name: dhcpd
        state: restarted
      delegate_to: "{{ bastion.ip }}"

    - name: "restart dnsmasq"
      become: "true"
      become_user: "root"
      service:
        name: dnsmasq
        state: restarted
      delegate_to: "{{ bastion.ip }}"
