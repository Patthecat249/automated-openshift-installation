# Execute on install-vm

- name: "OCP-MASTER01-VM"
  become: "true"
  become_user: "root"
  hosts: 127.0.0.1
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  vars:
    - cpu: "{{ masters[0].cpu }}"
    - ram: "{{ masters[0].ram }}"
    - hostname: "{{ masters[0].hostname }}"
    - ip: "{{ masters[0].ip }}"
    - ignition_file: "{{ignition_filename_master}}"
 
  tasks:
# Erstelle Arbeitsverzeichnisse
    - name: "01 --- Create Working-Directories"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_root }}"
        - "{{ dir_terraform }}{{ masters[0].hostname }}"
        - "{{ dir_terraform }}{{ masters[1].hostname }}"
        - "{{ dir_terraform }}{{ masters[2].hostname }}"
        - "{{ dir_terraform }}{{ workers[0].hostname }}"
        - "{{ dir_terraform }}{{ workers[1].hostname }}"
        - "{{ dir_terraform }}{{ workers[2].hostname }}"
        - "{{ dir_terraform_module_vm }}"
      tags:
        - create

# Prüfe, ob der Hostname {{masters[0].hostname}} bereits in /etc/dnsmasq.conf existiert.
    - name: "02 --- Check, if IP-Address {{ masters[0].hostname }} exists in /etc/dnsmasq.conf"
      command: "grep \"{{ masters[0].hostname }}\" /etc/dnsmasq.conf"
      register: is_hostname_in_dnsmasq
      check_mode: no
      ignore_errors: yes
      changed_when: no
      delegate_to: "11.11.11.53"
      tags:
        - checker

    - name: "03 --- If /etc/dnsmasq.conf contains {{ masters[0].hostname }}, Stop Ansible-Playbook"
      debug: msg="Der Hostname {{ masters[0].hostname }} existiert bereits in /etc/dnsmasq.conf!"
      when: is_hostname_in_dnsmasq.rc == 0
      tags:
        - checker

# Beende das Playbook, wenn die IP-Adresse bereits in /etc/dnsmasq.conf existiert
    # - meta: end_play
    #   when: checkmyconf.rc == 0
# Beende das Playbook, wenn der Hostname bereits in /etc/dnsmasq.conf existiert
    - meta: end_play
      when: is_hostname_in_dnsmasq.rc == 0

# Erstelle VM-Instanz Terraform "main.tf"-file
# In dieser Datei wird auf auf das Terraform-Modul verwiesen
    - name: "04 --- Create main.tf-file from ocp-master-tf.j2"
      template:
        src: "../99-jinja-templates/terraform/ocp-master-tf.j2"
        dest: "{{ dir_terraform }}{{ masters[0].hostname }}/main.tf"
      tags:
        - create

# Erzeuge und kopiere das output.tf-file in den VM-Instanz-Ordner
    - name: "05 --- Create output.tf-file from jinja-template output.tf"
      template:
        src: "../99-jinja-templates/terraform/output.j2"
        dest: "{{ dir_terraform }}{{ masters[0].hostname }}/output.tf"
      tags:
        - create

# Erstelle und kopiere das vars.tf-file in den Terraform-Module Ordner
    - name: "06 --- Create vars.tf-file from jinja-template vars-coreos-tf.j2"
      template:
        src: "../99-jinja-templates/terraform/vars-coreos-tf.j2"
        dest: "{{ dir_terraform }}{{ masters[0].hostname }}/vars.tf"
      tags:
        - create

# Erstelle und kopiere das main.tf-file in den Terraform-Module Ordner
# Clone-Modul: Die VM wird aus einem Clone erzeugt.
    - name: "07 --- Create main.tf-file from jinja-template main.tf"
      template:
        src: "../../terraform/templates/clone.tf.j2"
        dest: "{{ dir_terraform_module_vm }}main.tf"
      tags:
        - create

# Erzeuge und kopiere das output.tf-file in den Terraform-Module Ordner 
    - name: "08 --- Create output.tf-file from jinja-template output.tf"
      template:
        src: "../../terraform/modules/vm-vsphere/output.tf"
        dest: "{{ dir_terraform_module_vm }}output.tf"
      tags:
        - create

# Erzeuge die virtuelle Maschine
    - name: "09 --- Create virtual machine with terraform"
      raw: "cd {{ dir_terraform }}{{ masters[0].hostname }} && /usr/local/bin/terraform init && /usr/local/bin/terraform apply -auto-approve"

# Ermittle die MAC-Adresse, der erzeugten VM
    - name: "10 --- Retrieve mac-address from created virtual machine"
      raw: "cd {{ dir_terraform }}{{ masters[0].hostname }} && /usr/local/bin/terraform output -json | jq '.[\"mac-address\"].value' | sed -e 's|\"||g'"
      register: mac

# Erstelle für diese VM, anhand der MAC-Adresse ein PXELINUX-Config-File im TFTPROOT-Dir vom PXE-SERVER
    - name: "11 --- Create pxelinux-config-file with mac-address-filename on tftproot on pxe-server"
      become: "true"
      become_user: "root"
      template:
        src: "../99-jinja-templates/pxe/pxelinux.cfg.j2"
        dest: "{{dir_tftproot}}01-{{ mac.stdout | trim | regex_replace(':', '-')}}"
        mode: "0755"
        owner: "dnsmasq"
        group: "wheel"
      delegate_to: "{{ bastion.ip }}"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DHCP-Eintrag in DNSMASQ
    - name: "12 --- Add DHCP-entry to dnsmasq.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: /etc/dnsmasq.conf
        insertafter: "^# DHCP-Host-Entries"         
        line: "dhcp-host={{ mac.stdout | trim }},{{ masters[0].hostname }},{{ masters[0].ip }},set:openshift_node"
      delegate_to: "{{ bastion.ip }}"
      notify: "restart dnsmasq"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DNS-Lookup-Eintrag in DNSMASQ
    - name: "13 --- Add DNS-Lookup-entry to dnsmasq.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: "/etc/dnsmasq.conf"
        insertafter: "^# DNS-Name-Resolution" 
        line: "address=/{{ masters[0].hostname }}.{{clustername}}.{{domain}}/{{ masters[0].ip }}"
      delegate_to: "{{ bastion.ip }}"
      notify: "restart dnsmasq"

# Starte den DNS-Dienst erneut, wenn sich etwas an der DNS-Konfiguration geändert hat.
  handlers:
    - name: "restart dnsmasq"
      become: "true"
      become_user: "root"
      service:
        name: dnsmasq
        state: restarted
      delegate_to: "{{ bastion.ip }}"

