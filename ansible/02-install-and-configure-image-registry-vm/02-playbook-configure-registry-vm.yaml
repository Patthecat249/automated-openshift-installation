---
- name: "Configuration of a load-balancer"
  hosts: "{{ registry.hostname }}"
  become: "true"
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  tasks:
# Zeitausgabe
    - name: "--- Starte Playbook: {{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"
      debug: msg="{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"

# Do ssh-copy-id to localhost, so that ansible can communicate with localhost
    - name: "01 - ssh-copy-id as user-root to {{registry.hostname}}"
      become: "true"
      become_user: "root"
      raw: "ssh-copy-id -o StrictHostKeyChecking=no root@{{registry.hostname}}"
      delegate_to: "localhost"

# Install some software
    - name: "02 - Install podman"
      yum:
        name: 
          - "podman"
          - "wget"
          - "openssl"
          - "httpd-tools"
        state: "present"

# Create Working-Directories on Install-VM
    - name: "03 --- Create Working-Directories on Install-VM"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_downloads }}"
      delegate_to: "localhost"

# Create Working-Directories on {{ registry.hostname }}
    - name: "04 --- Create Working-Directories on {{ registry.hostname }}"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{dir_registry_auth}}"
        - "{{dir_registry_certs}}"
        - "{{dir_registry_data}}"

# Download openshift software from internet
# Download Kernel
    - name: "05 - Download CoreOS - Kernel"
      get_url:
        url="{{link_to_coreos_kernel}}"
        dest="{{ dir_downloads }}{{file_coreos_kernel}}"
      register: get_kernel
      tags:
        - downloads

    - debug: 
        msg="{{file_coreos_kernel}} was downloaded"
      when: get_kernel|changed
      tags:
        - downloads

# Download Initrd
    - name: "05 - Download CoreOS - Initrd"
      get_url:
        url="{{link_to_coreos_initrd}}"
        dest="{{ dir_downloads }}{{file_coreos_initrd}}"
      register: get_initrd
      tags:
        - downloads

    - debug: 
        msg="{{file_coreos_kernel}} was downloaded"
      when: get_initrd|changed
      tags:
        - downloads

# Download RAW_GZ
    - name: "05 - Download CoreOS - raw_gz"
      get_url:
        url="{{link_to_coreos_raw_gz}}"
        dest="{{ dir_downloads }}{{file_coreos_raw_gz}}"
      register: get_rawgz
     tags:
       - downloads

    - debug: 
        msg="{{file_coreos_kernel}} was downloaded"
      when: get_rawgz|changed
     tags:
       - downloads

    - name: "05 - Download OpenShift-Software"
      get_url:
        url: "{{ item }}"
        dest: "{{ dir_downloads }}"
      with_items:
        - "{{ link_to_oc }}"
        - "{{ link_to_openshift_installer }}"
        - "{{ link_to_coreos_kernel }}"
        - "{{ link_to_coreos_initrd }}"
        - "{{ link_to_coreos_raw_gz }}"
      delegate_to: "localhost"

# Extraction of zip-archive
    - name: "06 - Extract the oc-client"
      unarchive:
        src: "{{ dir_downloads }}openshift-client-linux-{{version_openshift}}.tar.gz"
        dest: "{{ dir_downloads }}"
        remote_src: "true"
      delegate_to: "localhost"

# Extraction of zip-archive
    - name: "07 - Extract the openshift-installer"
      unarchive:
        src: "{{ dir_downloads }}openshift-install-linux-{{version_openshift}}.tar.gz"
        dest: "{{ dir_downloads }}"
        remote_src: "true"
      delegate_to: "localhost"

# Make oc executable >> copy to /usr/local/bin/oc
    - name: "08 - copy oc to /usr/local/bin and make executable"
      copy:
        src: "{{ dir_downloads }}oc"
        dest: "/usr/local/bin/oc"
        mode: "0755"

# Make openshift-installer executable >> copy to /usr/local/bin/openshift-install
    - name: "09 - copy oc to /usr/local/bin and make executable"
      copy:
        src: "{{ dir_downloads }}openshift-install"
        dest: "/usr/local/bin/openshift-install"
        mode: "0755"

# Create SSL-Cert for Registry
    - name: "10 - Create SSL-Cert for Registry"
      raw: "cd {{dir_registry_certs}} && openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt -subj '/C=DE/ST=Brandenburg/L=Cottbus/O=Home/OU=local/CN={{registry.hostname}}.{{domain}}'"


# Create User for registry
    - name: "11 - Create User {{registry_user}} for Registry"
      raw: "htpasswd -bBc {{dir_registry_auth}}htpasswd {{registry_user}} {{registry_pass}}"


# Run the mirror-registry with Podman
    - name: "12 - Start Registry with podman as mirror-registry"
      command: "podman run --name mirror-registry -p {{registry_port}}:{{registry_port}} \ 
     -v {{dir_registry_data}}:/var/lib/registry:z \
     -v {{dir_registry_auth}}:/auth:z \
     -e 'REGISTRY_AUTH=htpasswd' \
     -e 'REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm' \
     -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
     -v {{dir_registry_certs}}:/certs:z \
     -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
     -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
     -e REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED=true \
     -d docker.io/library/registry:2"

# Copy certs to trust-store
    - name: "13 - Copy registry-certificate to linux-trust-store"
      copy:
        src: "{{dir_registry_certs}}domain.crt"
        dest: "/etc/pki/ca-trust/source/anchors/domain.crt"
        remote_src: "true"

# Update the Trust-Store
    - name: "14 - Update Linux Trust-Store"
      raw: "update-ca-trust" 

# Copy the registry-cert from registry-vm to install-vm
    - name: "15 - Copy registry-certificate to local Linux Trust-Store"
      raw: "scp {{registry.hostname}}:{{dir_registry_certs}}domain.crt /etc/pki/ca-trust/source/anchors/domain.crt" 
      delegate_to: "localhost"

# Update the Trust-Store of install-vm
    - name: "16 - Update local Linux Trust-Store"
      raw: "update-ca-trust" 
      delegate_to: "localhost"

# Configure the firewall
    - name: "17 - Configure firewalld to open port 5000 for mirror-registry"
      firewalld:
        permanent: "true"
        state: "enabled"
        port: "5000/tcp"
      notify:
        - restart firewalld

# Zeitausgabe
    - name: "--- Ende Playbook: {{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"
      debug: msg="{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"


  handlers:
    - name: "restart firewalld"
      systemd:
        name: "firewalld"
        state: "restarted"
...