---
- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook - Configure the Registry-VM"
  hosts: "{{ registry.hostname }}"
  become: "true"
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  tasks:
# Zeitausgabe
    - name: "--- Starte Playbook: {{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"
      debug: msg="{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"

# Do ssh-copy-id to localhost, so that ansible can communicate with localhost
    - name: "85 - ssh-copy-id as user-root to {{registry.ip}}"
      become: "true"
      become_user: "root"
      raw: "sshpass -f '/root/rootpassword' ssh-copy-id -i /root/.ssh/id_rsa -o StrictHostKeyChecking=no root@{{registry.ip}}"
      delegate_to: "localhost"

# Create Working-Directories on Install-VM
    - name: "87 --- Create Working-Directories on {{ install_vm.hostname }}"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_downloads }}"
      delegate_to: "localhost"

# Create Working-Directories on {{ registry.ip }}
    - name: "88 --- Create Working-Directories on {{ registry.ip }}"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{dir_registry_auth}}"
        - "{{dir_registry_certs}}"
        - "{{dir_registry_data}}"
        - "/opcregistry"

# Add seconds disk
    - name: Create directory /ocpregistry
      ansible.builtin.file:
        path: /ocpregistry
        state: directory
        mode: '0755'

    - name: Initialize /dev/sdb as a physical volume (PV)
      ansible.builtin.command:
        cmd: pvcreate /dev/sdb
      # only if the device is not already a PV
      when: ansible_facts.devices['sdb'].partitions == {}

    - name: Create volume group vg-registry
      ansible.builtin.command:
        cmd: vgcreate vg-registry /dev/sdb
      # only if the VG doesn't exist
      when: "'vg-registry' not in ansible_lvm.vgs"

    - name: Create logical volume lv-registry in vg-registry
      ansible.builtin.command:
        cmd: lvcreate -n lv-registry -l 100%FREE vg-registry
      # only if the LV doesn't exist
      when: "'lv-registry' not in ansible_lvm.lvs"

    - name: Format the logical volume with XFS
      ansible.builtin.command:
        cmd: mkfs.xfs /dev/vg-registry/lv-registry
      # only if it's not already formatted as XFS
      when: ansible_mounts | selectattr('mount', 'equalto', '/ocpregistry') | map(attribute='fstype') | list != ['xfs']

    - name: Mount the logical volume to /ocpregistry
      ansible.builtin.mount:
        path: /ocpregistry
        src: /dev/vg-registry/lv-registry
        fstype: xfs
        state: mounted

    - name: Ensure /dev/vg-registry/lv-registry is mounted at boot in /etc/fstab
      ansible.builtin.mount:
        path: /ocpregistry
        src: /dev/vg-registry/lv-registry
        fstype: xfs
        opts: defaults
        state: present


# Download openshift software from internet
# Download oc-client
    - name: "89 - Download OpenShift - oc-client on {{ install_vm.hostname }}"
      get_url:
        url="{{link_to_oc}}"
        dest="{{ dir_downloads }}{{file_oc}}"
      register: get_oc
      tags:
        - downloads
      delegate_to: "localhost"

# Extraction of zip-archive
    - name: "94 - Extract the oc-client on {{ install_vm.hostname }}"
      unarchive:
        src: "{{ dir_downloads }}openshift-client-linux-{{version_openshift}}.tar.gz"
        dest: "{{ dir_downloads }}"
        remote_src: "true"
      delegate_to: "localhost"

# Make oc executable >> copy to /usr/local/bin/oc
    - name: "96 - copy oc to /usr/local/bin and make executable"
      copy:
        src: "{{ dir_downloads }}oc"
        dest: "/usr/local/bin/oc"
        mode: "0755"

# Create SSL-Cert for Registry
    - name: "98 - Create SSL-Cert for Registry"
      #raw: "cd {{dir_registry_certs}} && openssl11 req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt -subj '/C=DE/ST=Brandenburg/L=Cottbus/O=Home/OU=local/CN={{registry.hostname}}.{{clustername}}.{{domain}}' -addext 'subjectAltName = DNS:{{registry.hostname}}.{{clustername}}.{{domain}}'"
      raw: "cd {{dir_registry_certs}} && openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt -subj '/C=DE/ST=Brandenburg/L=Cottbus/O=Home/OU=local/CN={{registry.hostname}}.{{clustername}}.{{domain}}' -addext 'subjectAltName = DNS:{{registry.hostname}}.{{clustername}}.{{domain}}'"
      tags:
        - "SSLa"

# Create User for registry
    - name: "99 - Create User {{registry_user}} for Registry"
      raw: "htpasswd -bBc {{dir_registry_auth}}htpasswd {{registry_user}} {{registry_pass}}"

# Füge dem Pull-Secret einen neuen Eintrag hinzu
    - name: Add new registry to pull-secret.json
      ansible.builtin.lineinfile:
        path: "/opt/sva/tools/pull-secret"
        insertafter: '"auths": {'  # Fügt die Zeile nach dem "auths"-Eintrag ein
        line: |
          "{{local_registry}}:{{registry_port}}": {
            "auth": "{{ registry_auth | b64encode }}",
            "email": "bla@bla.bla"
          },
      tags:
        - addregistry


# Run the mirror-registry with Podman
    - name: "100 - Start Registry with podman as mirror-registry"
      command: "podman run --name mirror-registry -p {{registry_port}}:{{registry_port}} \ 
     -v {{dir_registry_data}}:/var/lib/registry:z \
     -v {{dir_registry_auth}}:/auth:z \
     -e 'REGISTRY_AUTH=htpasswd' \
     -e 'REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm' \
     -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
     -v {{dir_registry_certs}}:/certs:z \
     -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
     -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
     -e REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED=true \
     -d docker.io/library/registry:2"

# Copy certs to trust-store
    - name: "101a - Copy registry-certificate to linux-trust-store"
      copy:
        src: "{{dir_registry_certs}}domain.crt"
        dest: "/etc/pki/ca-trust/source/anchors/domain.crt"
        remote_src: "true"

# Copy domain.crt to localhost
    - name: "101b - Fetch domain.crt - Copy from registry-host to localhost"
      fetch:
        src: "{{dir_registry_certs}}domain.crt"
        dest: "{{dir_tools}}{{registry.hostname}}.crt"
        flat: "yes"
      tags:
        - ocpregistrycert

# Copy to bastion-Host
    - name: "101c - Copy registry-certificate to linux-trust-store"
      copy:
        src: "{{dir_tools}}{{registry.hostname}}.crt"
        dest: "/etc/pki/ca-trust/source/anchors/{{registry.hostname}}.crt"
      delegate_to: "{{bastion.ip}}"
      tags:
        - ocpregistrycert

# Update the Trust-Store
    - name: "102a - Update Linux Trust-Store"
      raw: "update-ca-trust" 

# Update the Trust-Store
    - name: "102b - Update Linux Trust-Store from Bastion-Host"
      raw: "update-ca-trust" 
      delegate_to: "{{bastion.ip}}"
      tags:
        - ocpregistrycert


# Copy the registry-cert from registry-vm to install-vm
    - name: "103 - Copy registry-certificate to local Linux Trust-Store"
      raw: "scp {{registry.ip}}:{{dir_registry_certs}}domain.crt /etc/pki/ca-trust/source/anchors/domain.crt" 
      delegate_to: "localhost"

# Update the Trust-Store of install-vm
    - name: "104 - Update local Linux Trust-Store"
      raw: "update-ca-trust" 
      delegate_to: "localhost"

# Configure the firewall
    # - name: "21 - Configure firewalld to open port 5000 for mirror-registry"
    #   firewalld:
    #     permanent: "true"
    #     state: "enabled"
    #     port: "5000/tcp"
    #   notify:
    #     - restart firewalld

# Disable Firewalld
    - name: "105 - Disable Firewalld"
      systemd:
        name: "firewalld"
        state: "stopped"
        enabled: "no"

# Restart the registry-pod
    - name: "106 - Restart the registry-pod"
      raw: "podman stop mirror-registry && podman start mirror-registry" 

    - name: "107 - Summary"
      debug: msg="Login with = podman login {{registry.hostname}}.{{clustername}}.{{domain}}:{{registry_port}} -u {{registry_user}}"


# Zeitausgabe
    - name: "--- Ende Playbook: {{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"
      debug: msg="{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }}"


  handlers:
    - name: "restart firewalld"
      systemd:
        name: "firewalld"
        state: "restarted"
...
