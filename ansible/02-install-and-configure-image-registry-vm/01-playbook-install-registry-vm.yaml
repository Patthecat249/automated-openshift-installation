- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook - Install the Registry-VM"
  become: "true"
  become_user: "root"
  hosts: 127.0.0.1
  gather_facts: "false"
  vars_files:
    - "../vars/vars.yaml"
  vars:
    - cpu: "{{ registry.cpu }}"
    - ram: "{{ registry.ram }}"
    - hostname: "{{ registry.hostname }}"
    - ip: "{{ registry.ip }}"
    - kickstart_file: "{{ registry.hostname }}.cfg"
 
  tasks:
    # Check if Folder exists
    - name: "00 - Prüfe, ob Ordner {{ dir_terraform }}{{ registry.hostname }} existiert"
      stat:
        path: "{{ dir_terraform }}{{ registry.hostname }}"
      register: folder_details
      ignore_errors: yes

    - name: "Folder exists: {{ dir_terraform }}{{ registry.hostname }}"
      debug:
        msg: "The folder {{ dir_terraform }}{{ registry.hostname }} exists. Please check, if Host: {{ registry.hostname }} is already installed."
      when: folder_details.stat.isdir is defined and folder_details.stat.isdir

    - meta: end_play
      when: folder_details.stat.exists == true

# Erstelle Arbeitsverzeichnisse
    - name: "78 --- Create Working-Directories"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_root }}"
        - "{{ dir_terraform }}{{ registry.hostname }}"
      tags:
        - create

# Erstelle VM-Instanz Terraform "main.tf"-file
# In dieser Datei wird auf auf das Terraform-Modul verwiesen
    - name: "12 --- Create main.tf-file from tf-vm-module.j2"
      template:
        src: "../99-jinja-templates/terraform/registry-tf.j2"
        dest: "{{ dir_terraform }}{{ registry.hostname }}/main.tf"

# Erzeuge und kopiere das output.tf-file in den VM-Instanz-Ordner
    - name: "80 --- Create output.tf-file"
      template:
        src: "../99-jinja-templates/terraform/output.j2"
        dest: "{{ dir_terraform }}{{ registry.hostname }}/output.tf"
      tags:
        - create

# Erstelle und kopiere das vars.tf-file in den Terraform-Module Ordner
    - name: "14 --- Create vars.tf-file from jinja-template vars.tf"
      template:
        src: "../99-jinja-templates/terraform/vars-tf.j2"
        dest: "{{ dir_terraform }}{{ registry.hostname }}/vars.tf"
      tags:
        - create


# Erzeuge die virtuelle Maschine
    - name: "81 --- Create virtual machine ({{ registry.hostname }}) with terraform"
      raw: "cd {{ dir_terraform }}{{ registry.hostname }} && /usr/local/bin/terraform init && /usr/local/bin/terraform apply -auto-approve"

# Ermittle die MAC-Adresse, der erzeugten VM
    - name: "82 --- Retrieve mac-address from created virtual machine"
      raw: "cd {{ dir_terraform }}{{ registry.hostname }} && terraform output -json | jq '.[\"mac-address\"].value' | sed -e 's|\"||g'"
      register: mac

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DHCP-Eintrag in DNSMASQ
    - name: "83 --- Add DHCP-entry to dnsmasq.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: /etc/dnsmasq.conf
        insertafter: "^# OpenShift-Nodes-DHCP"         
        line: "dhcp-host={{ mac.stdout | trim }},{{ registry.hostname }},{{ registry.ip }},set:ocp43"
      delegate_to: "{{ bastion.ip }}"
      notify: "restart dnsmasq"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DNS-Lookup-Eintrag in DNSMASQ
    - name: "84 --- Add DNS-Lookup-entry to dnsmasq.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: "/etc/dnsmasq.conf"
        insertafter: "^# OpenShift-Nodes-DNS" 
        line: "address=/{{ registry.hostname }}.{{domain}}/{{ registry.ip }}"
      delegate_to: "{{ bastion.ip }}"
      notify: "restart dnsmasq"


# Starte den DNS-Dienst erneut, wenn sich etwas an der DNS-Konfiguration geändert hat.
  handlers:
    - name: "restart dnsmasq"
      become: "true"
      become_user: "root"
      service:
        name: dnsmasq
        state: restarted
      delegate_to: "{{ bastion.ip }}"

