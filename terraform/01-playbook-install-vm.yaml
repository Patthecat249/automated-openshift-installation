- name: "Install-VM"
  hosts: 127.0.0.1
  gather_facts: "false"
  vars:
    hostname: "default-template"
    domain: "ocp43-patrick.home.local"
    dir_tftproot: "/tftproot/pxelinux.cfg/"
    vm_type: "worker"
    ip: "10.0.249.111"
    cpu: "1"
    ram: "1024"
    disksize: "120"
    boot_delay: "60000"
    dir_root: "/opt/sva/"
    dir_terraform: "{{dir_root}}terraform/"
    dir_terraform_modules: "{{dir_terraform}}modules/"
    dir_terraform_module_vm: "{{dir_terraform_modules}}vm-vsphere/"
    dir_vmware: "/dc-home/vm/spielwiese"
    dir_nfs_root: "/mnt/sva"
    dir_mounted_kickstart_configs: "nfs-iso/kickstart-configs/"
    vsphere_server: "vcenter.home.local"
    vsphere_user: "administrator@home.local"
    vsphere_pass: "Test1234!"
    nfs_server: "nas.home.local"
    nfs_software_folder: "/volume1/nfs-iso/downloaded-iso/linux/"
    nfs_kickstart_folder: "/volume1/nfs-iso/kickstart-configs/"
    iso_centos77: "CentOS-7-x86_64-DVD-1908.iso"
    pxe_vmlinux_kernel: "kernels_initrd/centos77/vmlinuz"
    pxe_initrd_image: "kernels_initrd/centos77/initrd.img"
    ntp_server: "router.home.local"
    kickstart_file: "{{hostname}}.cfg"
  tasks:



# Erstelle Arbeitsverzeichnisse
    - name: "00 --- Create Working-Directories"
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: "true"
      with_items:
        - "{{ dir_root }}"
        - "{{ dir_terraform }}"
        - "{{ dir_terraform }}{{ hostname }}"
        - "{{ dir_terraform_module_vm }}"
        - "{{ dir_nfs_root }}"
      tags:
        - create

# Mounte das NFS-Verzeichnis /volume1/nfs-iso nach /mnt/sva


# Erstelle aus einem Template eine Kickstart-Datei und speichere sie auf dem NFS-Share
   - name: "01 --- Create kickstart.cfg from kickstart.j2"
      template:
        src: "templates/kickstart.j2"
        dest: "{{dir_nfs_root}}{{dir_mounted_kickstart_configs}}{{kickstart_file}}" # Hier muss noch der Pfad angepasst werden
      tags:
        - create

# Erstelle VM-Instanz Terraform "main.tf"-file
    - name: "01 --- Create main.tf-file from vm.tf.j2"
      template:
        src: "templates/tf-vm-module.j2"
        dest: "{{ dir_terraform }}{{ hostname }}/main.tf"
      tags:
        - create

# Erzeuge und kopiere das output.tf-file in den VM-Instanz-Ordner
    - name: "02 --- Create output.tf-file from jinja-template output.tf"
      template:
        src: "templates/output.j2"
        dest: "{{ dir_terraform }}{{ hostname }}/output.tf"
      tags:
        - create

# Erstelle und kopiere das vars.tf-file in den Terraform-Module Ordner
    - name: "03 --- Create vars.tf-file from jinja-template vars.tf"
      template:
        src: "modules/vm-vsphere/vars.tf"
        dest: "{{ dir_terraform_module_vm }}vars.tf"
      tags:
        - create

# Erstelle und kopiere das main.tf-file in den Terraform-Module Ordner
    - name: "04 --- Create main.tf-file from jinja-template main.tf"
      template:
        src: "modules/vm-vsphere/main.tf"
        dest: "{{ dir_terraform_module_vm }}main.tf"
      tags:
        - create

# Erzeuge und kopiere das output.tf-file in den Terraform-Module Ordner 
    - name: "05 --- Create output.tf-file from jinja-template output.tf"
      template:
        src: "modules/vm-vsphere/output.tf"
        dest: "{{ dir_terraform_module_vm }}output.tf"
      tags:
        - create

# Erzeuge die virtuelle Maschine
    - name: "06 --- Create virtual machine with terraform"
      raw: "cd {{ dir_terraform }}{{ hostname }} && terraform init && terraform apply -auto-approve"

# Ermittle die MAC-Adresse, der erzeugten VM
    - name: "07 --- Retrieve mac-address from created virtual machine"
      raw: "cd {{ dir_terraform }}{{ hostname }} && terraform output -json | jq '.[\"mac-address\"].value' | sed -e 's|\"||g'"
      register: mac

# Erstelle für diese VM, anhand der MAC-Adresse ein PXELINUX-Config-File im TFTPROOT-Dir vom PXE-SERVER
    - name: "08 --- Create pxelinux-config-file with mac-address-filename on tftproot on pxe-server"
      become: "true"
      become_user: "root"
      template:
        src: "templates/pxelinux-template.j2"
        dest: "{{dir_tftproot}}01-{{ mac.stdout | trim | regex_replace(':', '-')}}"
        mode: "0755"
        owner: "dnsmasq"
        group: "wheel"
      delegate_to: pxe-server

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DHCP-Eintrag in DNSMASQ
    - name: "09 --- Add DHCP-entry to dnsmasq.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: /etc/dnsmasq.conf
        insertafter: "^# OpenShift-Nodes"         
        line: "dhcp-host={{ mac.stdout | trim }},{{hostname}},{{ ip }},set:ocp43"
      delegate_to: pi
      notify: "restart dnsmasq"

# Erzeuge anhand der Mac-Adresse, IP-Adresse und des Hostnames, einen DNS-Lookup-Eintrag in DNSMASQ
    - name: "10 --- Add DNS-Lookup-entry to dnsmasq.conf"
      become: "true"
      become_user: "root"
      lineinfile:
        path: "/etc/dnsmasq.conf"
        insertafter: "^# Static-DNS-Assignements" 
        line: "address=/{{hostname}}.{{domain}}/{{ ip }}"
      delegate_to: pi
      notify: "restart dnsmasq"

# Starte den DNS-Dienst erneut, wenn sich etwas an der DNS-Konfiguration geändert hat.
  handlers:
    - name: "restart dnsmasq"
      become: "true"
      become_user: "root"
      service:
        name: dnsmasq
        state: restarted
      delegate_to: pi
